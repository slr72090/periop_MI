as.data.frame()
names(pr_mapping) <- c("ICD9", "cat")
## Generate string of ICD9 procedure codes that correspond to "major therapeutic interventions"
ICD9_procedure_cats <- pr_mapping %>%
filter(cat == 4) %>%
select(ICD9) %>%
unlist()
ICD9_string <- as.character(ICD9_procedure_cats)
pr_codes <- paste("(", toString(paste(ICD9_string,sep="")), ")", sep="")
pr_snippet <- " pr1 IN pr_codes"
for(j in c(2:n_procedures)){
new_txt <- paste0(" OR pr",j," IN pr_codes")
pr_snippet <- paste0(pr_snippet, new_txt)
}
pr_ccs_snippet <- " prccs1 NOT IN pr_ccs_excluded"
dx_snippet <- " dx1 LIKE '410%'"
for(j in c(2:n_dx)){
new_txt <- paste0(" OR dx",j," LIKE '410%'")
dx_snippet <- paste0(dx_snippet, new_txt)
}
nis_query <- "SELECT * FROM data_y WHERE (pr_snippet) AND (pr_ccs_snippet) AND (dx_snippet) AND age > 45 AND elective == 1"
#
#Sub correct year and procedure codes
nis_query <- gsub("y", toString(year), nis_query)
nis_query <- gsub("pr_snippet", pr_snippet, nis_query)
nis_query <- gsub("pr_codes", pr_codes, nis_query)
nis_query <- gsub("pr_ccs_snippet", pr_ccs_snippet, nis_query)
nis_query <- gsub("pr_ccs_excluded", pr_ccs_excluded_codes, nis_query)
nis_query <- gsub("dx_snippet", dx_snippet, nis_query)
# Perform the query
db <- dbConnect(RSQLite::SQLite(), "../data_files/NIS.db")
q <- RSQLite::dbSendQuery(db, nis_query)
# Get the data
t <- Sys.time()
core_df <- RSQLite::dbFetch(q, n=-1)
t2 <- Sys.time()
cat("nrow is ", nrow(core_df), "\n")
# Clear the query and disconnect from database to prevent memory leaks
RSQLite::dbClearResult(q)
dbDisconnect(db)
time_elapsed = t2 - t
print(time_elapsed)
head(core_df)
hist(core_df[core_df$died == 1,]$los)
sum(core_df$died)
dim(core_df)
died <- core_df %>% filter(died == 1)
hist(died$los, 100)
alive<- core_df %>% filter(died == 0)
hist(died$los, 100)
hist(alive$los, 100)
core_df %>% group_by(died) %>% summarize(median = median(los), IQR = quantile(los))
core_df %>% group_by(died) %>% summarize(median = median(los), IQR = quantile(los)[1])
t.test(alive$age, died$age)
setwd("~/Desktop")
library(plyr)
library(lubridate)
library(dplyr)
library(plyr)
read.csv("patient_dataset.csv", header = T)
data <- read.csv("patient_dataset.csv", header = T)
head(data)
str(data)
setwd("~/Desktop")
library(lubridate)
library(dplyr)
library(plyr)
setwd("~/Desktop")
source('~/Desktop/test.R')
library(ggplot)
library(ggplot2)
head(data)
summary(data)
str(data)
head(date(data$hosp_discharge))
dat <- data %>%
mutate(dob_formatted = mdy(dob))
dat <- data %>%
mutate(dob_formatted = mdy(dob),
hosp_adm_formatted = mdy(hosp_admission),
hosp_disc_formatted = mdy(hosp_discharge)) %>%
mutate(age = hosp_adm_formatted - dob_formatted)
hist(dat$age)
str(dat$age)
dat <- data %>%
mutate(dob_formatted = mdy(dob),
hosp_adm_formatted = mdy(hosp_admission),
hosp_disc_formatted = mdy(hosp_discharge)) %>%
mutate(age = as.numeric(hosp_adm_formatted - dob_formatted))
hist(dat$age)
hist(dat$age/365)
dat <- data %>%
mutate(dob_formatted = mdy(dob),
hosp_adm_formatted = mdy(hosp_admission),
hosp_disc_formatted = mdy(hosp_discharge)) %>%
mutate(age = as.numeric(hosp_adm_formatted - dob_formatted)/365)
hist(dat$age, 100)
# Choose patients with CA
d.m.ca <- dat %>% filter(had_cardiac_arrests == 1 & gender == "")
# Choose patients with CA
d.m.ca <- dat %>% filter(had_cardiac_arrests == 1 & gender == "M")
dat.ca.age <- dat %>%
group_by(had_cardiac_arrests) %>%
summarize(mean_age = mean(age),
sd_age = sd(age))
dat.ca.age
summary(dat$had_cardiac_arrests)
summarize <- dplyr::summarize
dat.ca.age <- dat %>%
group_by(had_cardiac_arrests) %>%
summarize(mean_age = mean(age),
sd_age = sd(age))
dat.ca.age
mean.age <- dat %>% filter(had_cardiac_arrests == 1) %>%
select(age) %>%
unlist() %>%
mean()
head(dat)
mean.age <- dat %>%
filter(had_cardiac_arrests == 1) %>%
select(age)
select <- dplyr::select
mean.age <- dat %>%
filter(had_cardiac_arrests == 1) %>%
select(age)
mean.age <- dat %>%
filter(had_cardiac_arrests == 1) %>%
select(age) %>%
unlist() %>%
mean()
mean.age
dat.ca.age <- dat %>%
group_by(had_cardiac_arrests) %>%
t.test()
dat.ca.age <- dat %>%
group_by(had_cardiac_arrests) %>%
t.test(age)
## Exploratory data analysis; Perioperative MI
## Sylvia Ranjeva
# Set the working directory to the source file directory
setwd("~/Desktop/perip_MI_GITHUB/mortality_dispo_models/")
## Load package scripts -----------------------------------------------
require(ggplot2)
require(foreign)
require(readstata13)
require(dplyr)
require(tidyr)
require(FactoMineR)
require(PCAmixdata)
require(factoextra)
require(ggfortify)
require(RSQLite)
require(GGally)
require(reshape2)
require(cowplot)
require(corrplot)
require(tidyverse)
require(MASS)
library(proto)
library(pROC)
library(xtable)
select <- dplyr::select
#Plotting specs
textSize = 12
save_plots = F
source("../utility_scripts/plot_themes.R")
#Data saving
data_filename = "data_imputed.rda"
save_data = F
drop_missing = F
impute_missing = T
generate_data = F
output_tables = F
load(data_filename)
data <- data_formatted
rm(data_formatted)
dat_PCA <- data %>%
mutate(RCRI_pt = as.numeric(scale(as.numeric(RCRI_pt))))
dat_PCA <- dat_PCA[, (colnames(dat_PCA) %in% c("age",
"race",
"gender",
"obesity",
"smoking",
"alcoholic",
"HTN",
"HLD",
"hx_DM",
"hx_ckd",
"hx_isch_heart",
"hx_revasc",
"PAD",
"valve_dz",
"hx_chf",
"hx_VTE",
"chrnlung",
"malignancy",
"cm_mets",
"anemia",
"hx_CVA",
"high_risk_surgery"
))]
split.data.all <- splitmix(dat_PCA)
split.data <- split.data.all
X1 <- split.data$X.quanti
X2 <- split.data$X.quali
res.pcamix <- PCAmix(X.quanti=X1, X.quali=X2,rename.level=TRUE, ndim = 5,
graph=FALSE)
out.eig <- as.data.frame(res.pcamix$eig)
out.eig$dim <- c(1:nrow(out.eig))
out.ind <- as.data.frame(res.pcamix$ind$coord) %>%
mutate(ind = row_number()) %>%
left_join(data, by = "ind") %>%
drop_na()
out.quant <- res.pcamix$quanti$contrib.pct
out.qual <- res.pcamix$quali$contrib.pct
out.contrib <- rbind(out.quant,out.qual) %>%
as.data.frame()
out.contrib$var <- rownames(out.contrib)
out.coord <- as.data.frame(rbind(res.pcamix$quanti.cor, res.pcamix$categ.coord))
out.coord$var <- rownames(out.coord)
out.loadings <- res.pcamix$sqload
out.coord$sig <- as.factor(out.coord$`dim 1` > 0.4 | out.coord$`dim 2` > 0.5 |out.coord$`dim 1` < -0.4 | out.coord$`dim 2` < -0.5 )
#Select retained variables
out.contrib$max_contrib <- apply(out.contrib %>% select(-var),1,max)
retained_vars <- out.contrib %>% filter(max_contrib > 10) %>% select(var)
xlabel <- paste0(" Dim 1, ",round(out.eig$Proportion[1],2),"%")
ylabel <- paste0(" Dim 2, ",round(out.eig$Proportion[3],2),"%")
out.coord.sig <- out.coord %>% filter(sig ==T)
p_loadings = ggplot()+
#geom_point(data = out.loadings, aes(x=`dim 1`, y= `dim 2`, colour = "#DCDCDC"))+
geom_segment(data = out.coord, aes(x=0,y=0,xend=`dim 1`,yend=`dim 2`), color = "grey",
arrow=arrow(length=unit(0.2,"cm"))) +
geom_text(data = out.coord.sig, aes(x=`dim 1`, y=`dim 2`, label=factor(out.coord.sig$var)), color = "black") +
xlab(xlabel) +
ylab(ylabel) +
plot_themes
p_ind_RCRI <-  qplot(data = out.ind, x = `dim 1`, y = `dim 2`, colour = `RCRI >= 3`) +
stat_ellipse(geom = "polygon", alpha = .2, aes(fill = `RCRI >= 3`)) +
plot_themes
split.data.all <- splitmix(dat_PCA)
split.data <- split.data.all
X1 <- split.data$X.quanti
X2 <- split.data$X.quali
res.pcamix <- PCAmix(X.quanti=X1, X.quali=X2,rename.level=TRUE, ndim = 5,
graph=FALSE)
out.eig <- as.data.frame(res.pcamix$eig)
out.eig$dim <- c(1:nrow(out.eig))
out.ind <- as.data.frame(res.pcamix$ind$coord) %>%
mutate(ind = row_number()) %>%
left_join(data, by = "ind") %>%
drop_na()
out.quant <- res.pcamix$quanti$contrib.pct
out.qual <- res.pcamix$quali$contrib.pct
out.contrib <- rbind(out.quant,out.qual) %>%
as.data.frame()
out.contrib$var <- rownames(out.contrib)
out.coord <- as.data.frame(rbind(res.pcamix$quanti.cor, res.pcamix$categ.coord))
out.coord$var <- rownames(out.coord)
out.loadings <- res.pcamix$sqload
out.coord$sig <- as.factor(out.coord$`dim 1` > 0.4 | out.coord$`dim 2` > 0.5 |out.coord$`dim 1` < -0.4 | out.coord$`dim 2` < -0.5 )
p_ind_RCRI <-  qplot(data = out.ind, x = `dim 1`, y = `dim 2`, colour = `RCRI >= 3`) +
stat_ellipse(geom = "polygon", alpha = .2, aes(fill = `RCRI >= 3`)) +
plot_themes
dat_PCA <- data %>%
mutate(RCRI_pt = as.numeric(scale(as.numeric(RCRI_pt))))
dat_PCA <- dat_PCA[, (colnames(dat_PCA) %in% c("age",
"race",
"gender",
"obesity",
"smoking",
"alcoholic",
"HTN",
"HLD",
"hx_DM",
"hx_ckd",
"hx_isch_heart",
"hx_revasc",
"PAD",
"valve_dz",
"hx_chf",
"hx_VTE",
"chrnlung",
"malignancy",
"cm_mets",
"anemia",
"hx_CVA",
"high_risk_surgery"
))]
split.data.all <- splitmix(dat_PCA)
split.data <- split.data.all
X1 <- split.data$X.quanti
X2 <- split.data$X.quali
res.pcamix <- PCAmix(X.quanti=X1, X.quali=X2,rename.level=TRUE, ndim = 5,
graph=FALSE)
out.eig <- as.data.frame(res.pcamix$eig)
out.eig$dim <- c(1:nrow(out.eig))
out.ind <- as.data.frame(res.pcamix$ind$coord) %>%
mutate(ind = row_number()) %>%
left_join(data, by = "ind") %>%
drop_na()
out.quant <- res.pcamix$quanti$contrib.pct
out.qual <- res.pcamix$quali$contrib.pct
out.contrib <- rbind(out.quant,out.qual) %>%
as.data.frame()
out.contrib$var <- rownames(out.contrib)
out.coord <- as.data.frame(rbind(res.pcamix$quanti.cor, res.pcamix$categ.coord))
out.coord$var <- rownames(out.coord)
out.loadings <- res.pcamix$sqload
out.coord$sig <- as.factor(out.coord$`dim 1` > 0.4 | out.coord$`dim 2` > 0.5 |out.coord$`dim 1` < -0.4 | out.coord$`dim 2` < -0.5 )
qplot(data = out.ind, x = `dim 1`, y = `dim 2`, colour = `RCRI >= 3`) +
stat_ellipse(geom = "polygon", alpha = .2, aes(fill = `RCRI >= 3`)) +
plot_themes
choose(3,2)
help(choose)
## Exploratory data analysis; Perioperative MI
## Sylvia Ranjeva
# Set the working directory to the source file directory
setwd("~/Desktop/perip_MI_GITHUB/predict_MI_model")
## Load package scripts -----------------------------------------------
require(ggplot2)
require(foreign)
require(readstata13)
require(dplyr)
require(tidyr)
require(FactoMineR)
require(PCAmixdata)
require(factoextra)
require(ggfortify)
require(RSQLite)
require(GGally)
require(reshape2)
require(cowplot)
require(corrplot)
require(tidyverse)
require(MASS)
library(proto)
select <- dplyr::select
#Plotting specs
textSize = 12
save_plots = F
source("../utility_scripts/plot_themes.R")
#Data saving
dbfilename = "../data_files/NIS.db"
data_filename = "data_raw_with_surgery_type.rda"
save_data = F
drop_missing = F
impute_missing = T
generate_data = F
output_tables = F
load(data_filename)
data_formatted <- data_all %>%
rename(obesity = cm_obese,
alcoholic = cm_alcohol,
HTN = cm_htn_c,
valve_dz = cm_valve,
chrnlung = cm_chrnlung,
anemia = cm_anemdef,
PAD = cm_perivasc) %>%
mutate(age_factor = as.factor(ntile(age,3)),
#age = as.numeric(scale(age)),
#nchronic = as.numeric(scale(nchronic)),
#invasive_mgmt = as.factor(invasive_mgmt),
high_risk_surgery = as.factor(as.numeric(transplant == 1|thoracic_surgery == 1|vascular == 1)),
hx_revasc = as.factor(as.numeric(prior_CABG == 1 | prior_PCI ==1))) %>%
mutate(RCRI_pt = as.factor(as.numeric(RCRI_pt) + as.numeric(high_risk_surgery == 1))) %>%
select(-c(prior_CABG, prior_PCI, prior_MI, CAD, transplant,thoracic_surgery,vascular,nchronic)) %>%
mutate(`RCRI >= 3` = as.factor(as.numeric(RCRI_pt) > 3))
data_formatted <- data %>%
rename(obesity = cm_obese,
alcoholic = cm_alcohol,
HTN = cm_htn_c,
valve_dz = cm_valve,
chrnlung = cm_chrnlung,
anemia = cm_anemdef,
PAD = cm_perivasc) %>%
mutate(age_factor = as.factor(ntile(age,3)),
#age = as.numeric(scale(age)),
#nchronic = as.numeric(scale(nchronic)),
#invasive_mgmt = as.factor(invasive_mgmt),
high_risk_surgery = as.factor(as.numeric(transplant == 1|thoracic_surgery == 1|vascular == 1)),
hx_revasc = as.factor(as.numeric(prior_CABG == 1 | prior_PCI ==1))) %>%
mutate(RCRI_pt = as.factor(as.numeric(RCRI_pt) + as.numeric(high_risk_surgery == 1))) %>%
select(-c(prior_CABG, prior_PCI, prior_MI, CAD, transplant,thoracic_surgery,vascular,nchronic)) %>%
mutate(`RCRI >= 3` = as.factor(as.numeric(RCRI_pt) > 3))
head(data)
dfm_missing_demog <- data %>% select(c(year, race, gender, smoking, alcoholic, high_risk_surgery)) %>%
melt(., id.vars = "year") %>%
group_by(year,variable) %>%
summarize(Completeness = (mean(! is.na(value)) * 100),
n = n()) %>%
mutate(var_type = "Demographic variables")
dfm_missing_demog
names(data)
dfm_missing_demog <- data %>% select(c(year, race, gender, smoking, alcoholic, high_risk_surgery)) %>%
melt(., id.vars = "year")
head(dfm_missing_demog)
summarize <- dplyr::summarize
dfm_missing_demog <- data %>% select(c(year, race, gender, smoking, alcoholic, high_risk_surgery)) %>%
melt(., id.vars = "year") %>%
group_by(year,variable) %>%
summarize(Completeness = (mean(! is.na(value)) * 100),
n = n()) %>%
mutate(var_type = "Demographic variables")
dfm_missing_demog
dfm_missing_demog %>% filter(Completeness < 100)
summary(data)
sum(is.na(data$race))/nrow(data)
sum(is.na(data$race))
sum(is.na(data$gender))
sum(is.na(data$gender))/nrow(data)
dfm_missing_ASCVD_risk <- data %>%
select(year, hx_chf, hx_DM, HTN, obesity, HLD, hx_ckd) %>%
melt(., id.vars = "year") %>%
group_by(year,variable) %>%
summarize(Completeness = (mean(! is.na(value)) * 100),
n = n()) %>%
mutate(var_type = "ASCVD risk factors")
dfm_missing_ASCVD <- data %>%
select(year, hx_isch_heart, PAD, valve_dz, hx_CVA) %>%
melt(., id.vars = "year") %>%
group_by(year,variable) %>%
summarize(Completeness = (mean(! is.na(value)) * 100),
n = n()) %>%
mutate(var_type = "Known ASCVD")
dfm_missing_other_risk <- data %>%
select(year, chrnlung, cm_mets, malignancy, anemia) %>%
melt(., id.vars = "year") %>%
group_by(year,variable) %>%
summarize(Completeness = (mean(! is.na(value)) * 100),
n = n()) %>%
mutate(var_type = "Other risk factors")
df_missing_data <- rbind(dfm_missing_demog,
dfm_missing_ASCVD_risk,
dfm_missing_ASCVD,
dfm_missing_other_risk
) %>%
ungroup() %>%
mutate( year = as.numeric(as.character(year)))
dfm_missing_data
dfm_missing_demog
dfm_missing_data <- dfm_missing_demog %>% filter(variable %in% c("race","gender"))
ggplot(df_missing_data, aes(x = as.numeric(year), y = Completeness)) +
geom_line(aes(color = variable)) +
facet_wrap(~var_type) +
plot_themes +
ylim(50,100) +
xlab("")
ggplot(dfm_missing_data, aes(x = as.numeric(year), y = Completeness)) +
geom_line(aes(color = variable)) +
facet_wrap(~var_type) +
plot_themes +
ylim(50,100) +
xlab("")
ggplot(dfm_missing_data, aes(x = as.numeric(as.character(year)), y = Completeness)) +
geom_line(aes(color = variable)) +
facet_wrap(~var_type) +
plot_themes +
ylim(50,100) +
xlab("")
p_missing <- ggplot(dfm_missing_data, aes(x = as.numeric(as.character(year)), y = Completeness)) +
geom_line(aes(color = variable)) +
facet_wrap(~var_type) +
plot_themes +
ylim(50,100) +
xlab("")
save_plot("Missing_data_demog_all.pdf", p_missing, base_width = 8, base_height = 6)
p_missing <- ggplot(dfm_missing_data, aes(x = as.numeric(as.character(year)), y = (1-Completeness))) +
geom_point(aes(color = variable)) +
geom_line(aes(color = variable), linetype =2) +
facet_wrap(~var_type) +
plot_themes +
ylim(50,100) +
xlab("")
p_missing
p_missing <- ggplot(dfm_missing_data, aes(x = as.numeric(as.character(year)), y = (100-Completeness))) +
geom_point(aes(color = variable)) +
geom_line(aes(color = variable), linetype =2) +
facet_wrap(~var_type) +
plot_themes +
ylim(50,100) +
xlab("")
p_missing
ggplot(dfm_missing_data, aes(x = as.numeric(as.character(year)), y = (100-Completeness))) +
geom_point(aes(color = variable)) +
geom_line(aes(color = variable), linetype =2) +
facet_wrap(~var_type) +
plot_themes
p_missing <- ggplot(dfm_missing_data, aes(x = as.numeric(as.character(year)), y = (100-Completeness))) +
geom_point(aes(color = variable)) +
geom_line(aes(color = variable), linetype =2) +
facet_wrap(~var_type) +
plot_themes +
ylim(0,50) +
xlab("") +
ylab("Percent missing values")
ggplot(dfm_missing_data, aes(x = as.numeric(as.character(year)), y = (100-Completeness))) +
geom_point(aes(color = variable)) +
geom_line(aes(color = variable), linetype =2) +
#facet_wrap(~var_type) +
plot_themes +
ylim(0,50) +
xlab("") +
ylab("Percent missing values")
p_missing <- ggplot(dfm_missing_data, aes(x = as.numeric(as.character(year)), y = (100-Completeness))) +
geom_point(aes(color = variable)) +
geom_line(aes(color = variable), linetype =2) +
#facet_wrap(~var_type) +
plot_themes +
ylim(0,50) +
xlab("") +
ylab("Percent missing values")
save_plot("Missing_data_demog_all.pdf", p_missing, base_width = 8, base_height = 6)
