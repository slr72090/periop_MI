"PAD",
"valve_dz",
"hx_chf",
"hx_VTE",
"chrnlung",
"malignancy",
"cm_mets",
"anemia",
"hx_CVA",
"high_risk_surgery"
))]
split.data.all <- splitmix(dat_PCA)
split.data <- split.data.all
X1 <- split.data$X.quanti
X2 <- split.data$X.quali
res.pcamix <- PCAmix(X.quanti=X1, X.quali=X2,rename.level=TRUE, ndim = 5,
graph=FALSE)
out.eig <- as.data.frame(res.pcamix$eig)
out.eig$dim <- c(1:nrow(out.eig))
out.ind <- as.data.frame(res.pcamix$ind$coord) %>%
mutate(ind = row_number()) %>%
left_join(data, by = "ind") %>%
drop_na()
out.quant <- res.pcamix$quanti$contrib.pct
out.qual <- res.pcamix$quali$contrib.pct
out.contrib <- rbind(out.quant,out.qual) %>%
as.data.frame()
out.contrib$var <- rownames(out.contrib)
out.coord <- as.data.frame(rbind(res.pcamix$quanti.cor, res.pcamix$categ.coord))
out.coord$var <- rownames(out.coord)
out.loadings <- res.pcamix$sqload
out.coord$sig <- as.factor(out.coord$`dim 1` > 0.4 | out.coord$`dim 2` > 0.5 |out.coord$`dim 1` < -0.4 | out.coord$`dim 2` < -0.5 )
## Feature selection -------------------------------------------------------------------------------------------
#Select retained variables
out.contrib$max_contrib <- apply(out.contrib %>% select(-var),1,max)
retained_vars <- out.contrib %>% filter(max_contrib > 10) %>% select(var)
#### Evaluate correlations in covariates
xlabel <- paste0(" Dim 1, ",round(out.eig$Proportion[1],2),"%")
ylabel <- paste0(" Dim 2, ",round(out.eig$Proportion[3],2),"%")
out.coord.sig <- out.coord %>% filter(sig ==T)
p_loadings = ggplot()+
#geom_point(data = out.loadings, aes(x=`dim 1`, y= `dim 2`, colour = "#DCDCDC"))+
geom_segment(data = out.coord, aes(x=0,y=0,xend=`dim 1`,yend=`dim 2`), color = "grey",
arrow=arrow(length=unit(0.2,"cm"))) +
geom_text(data = out.coord.sig, aes(x=`dim 1`, y=`dim 2`, label=factor(out.coord.sig$var)), color = "black") +
xlab(xlabel) +
ylab(ylabel) +
plot_themes
out.eig
help(geom_hval)
geom_hline()
help("geom_hline")
ggplot(out.eig, aes(x = dim, y = Cumulative)) +
geom_point() +
geom_line(linetype = 2)
geom_hline(aes(yintercept = Cumulative)) +
xlab("Principal component dimension") +
ylab("Percentage of cumulative variance") +
plot_themes
ggplot(out.eig, aes(x = dim, y = Cumulative)) +
geom_point() +
geom_line(linetype = 2) +
geom_hline(aes(yintercept = Cumulative)) +
xlab("Principal component dimension") +
ylab("Percentage of cumulative variance") +
plot_themes
p_cumvar <- ggplot(out.eig, aes(x = dim, y = Cumulative)) +
geom_point() +
geom_line(linetype = 2) +
geom_hline(aes(yintercept = 70, color = "red")) +
xlab("Principal component dimension") +
ylab("Percentage of cumulative variance") +
plot_themes
p_cumvar
p_cumvar <- ggplot(out.eig, aes(x = dim, y = Cumulative)) +
geom_point() +
geom_line(linetype = 2) +
geom_hline(aes(yintercept = 70, color = "red")) +
labs("") +
xlab("Principal component dimension") +
ylab("Percentage of cumulative variance") +
plot_themes
p_cumvar
names(out.eig)
ggplot(out.eig, aes(x = dim, y = Eigenvalue)) +
geom_point() +
geom_line(linetype = 2) +
geom_hline(aes(yintercept = 1, aes(color = "red"))) +
labs("") +
xlab("Principal component dimension") +
ylab("Eigenvalue") +
plot_themes
p_eig <- ggplot(out.eig, aes(x = dim, y = Eigenvalue)) +
geom_point() +
geom_line(linetype = 2) +
geom_hline(aes(yintercept = 1, color = "red")) +
labs("") +
xlab("Principal component dimension") +
ylab("Eigenvalue") +
plot_themes
p_eig
p_eig <- ggplot(out.eig, aes(x = dim, y = Eigenvalue)) +
geom_point() +
geom_line(linetype = 2) +
geom_hline(aes(yintercept = 1, color = "red")) +
labs("") +
xlab("Principal component dimension") +
ylab("Eigenvalue") +
plot_themes +
theme(legend.position = "none")
p_eig
save_plot("eigenvalues.pdf", p_eig, base_width =  8, base_height =  6)
## Exploratory data analysis; Perioperative MI
## Sylvia Ranjeva
# Set the working directory to the source file directory
setwd("~/Desktop/perip_MI_GITHUB/mortality_dispo_models/")
## Load package scripts -----------------------------------------------
require(ggplot2)
require(foreign)
require(readstata13)
require(dplyr)
require(tidyr)
require(FactoMineR)
require(PCAmixdata)
require(factoextra)
require(ggfortify)
require(RSQLite)
require(GGally)
require(reshape2)
require(cowplot)
require(corrplot)
require(tidyverse)
require(MASS)
library(proto)
library(pROC)
library(xtable)
select <- dplyr::select
#Plotting specs
textSize = 12
save_plots = F
source("../utility_scripts/plot_themes.R")
#Data saving
data_filename = "data_imputed_with_stroke.rda"
save_data = F
drop_missing = F
impute_missing = T
generate_data = F
output_tables = F
year_vec = c(2008:2013)
n_procedures_vec <- rep(15,length(year_vec)) #rep(15,length(year_vec)) # Number of possible procedures per individual for this year
n_dx_vec <- c(15, 25, 25, 25, 25, 25) # Number of possible diagnoses per individual for this year
source("process_data.R")
year_vec = c(2008:2013)
n_procedures_vec <- rep(15,length(year_vec)) #rep(15,length(year_vec)) # Number of possible procedures per individual for this year
n_dx_vec <- c(15, 25, 25, 25, 25, 25) # Number of possible diagnoses per individual for this year
source("process_data.R")
## Exploratory data analysis; Perioperative MI
## Sylvia Ranjeva
## Load package scripts -----------------------------------------------
require(ggplot2)
require(foreign)
require(readstata13)
require(dplyr)
require(tidyr)
require(FactoMineR)
require(PCAmixdata)
require(factoextra)
require(ggfortify)
require(RSQLite)
require(GGally)
require(reshape2)
require(cowplot)
## Functions to identify relevant diagnoses and procedures by ICD9 codes
# Identify diagnoses
dx_fun <- function(string, x){
return(as.integer(sum(grepl(string, x)) > 0))
}
# Identify procedures
pr_fun <- function(code, x){
val <- sum(as.integer(x == code), na.rm=T)
if(val == 0){
return(val)
}
if(val > 0){
return(1)
}
}
# Query the database to obtain the relevant dataframe ## ------------------------------------------------------------------------
pr_mapping <- read.csv("../data_files/pc2015.csv") %>%
as.data.frame()
names(pr_mapping) <- c("ICD9", "cat")
## Generate string of ICD9 procedure codes that correspond to "major therapeutic interventions"
ICD9_procedure_cats <- pr_mapping %>%
filter(cat == 4) %>%
select(ICD9) %>%
unlist()
ICD9_string <- as.character(ICD9_procedure_cats)
pr_codes <- paste("(", toString(paste(ICD9_string,sep="")), ")", sep="")
# Exlcude primary procedure codes:
pr_ccs_excluded <- c(8, # non-OR nervous system
13:21, # optho procedures,
29, # dental procedures,
41, # non-OR respiratory,
43,44,45,46,48,49,50,52, # cardiac
62,63, # diagnostic and non-therapeutic cardiac procedures
64,65, # bone marrow
95, # non-OR GI
111, 117, 131, # non-OR GU
163, # non-OR MSK
174, # non-OR skin/breast,
211, # Radiation
229 #non-operative removal of foreign body
)
pr_ccs_excluded_codes <- paste("(", toString(paste(pr_ccs_excluded,sep="")), ")", sep="")
data_all <- data.frame()
year_vec = c(2008:2013)
n_procedures_vec <- rep(15,length(year_vec)) #rep(15,length(year_vec)) # Number of possible procedures per individual for this year
n_dx_vec <- c(15, 25, 25, 25, 25, 25) # Number of possible diagnoses per individual for this year
source("process_data.R")
year_vec = c(2008:2013)
n_procedures_vec <- rep(15,length(year_vec)) #rep(15,length(year_vec)) # Number of possible procedures per individual for this year
n_dx_vec <- c(15, 25, 25, 25, 25, 25) # Number of possible diagnoses per individual for this year
source("process_data.R")
data_filename = "data_NA_with_stroke.rda"
data_formatted <- data_all %>%
rename(obesity = cm_obese,
alcoholic = cm_alcohol,
HTN = cm_htn_c,
valve_dz = cm_valve,
chrnlung = cm_chrnlung,
anemia = cm_anemdef,
PAD = cm_perivasc) %>%
mutate(age_factor = as.factor(ntile(age,3)),
age = as.numeric(scale(age)),
nchronic = as.numeric(scale(nchronic)),
invasive_mgmt = as.factor(invasive_mgmt),
high_risk_surgery = as.factor(as.numeric(transplant == 1|thoracic_surgery == 1|vascular == 1|abdominal == 1)),
high_risk_surgery_2 = as.factor(as.numeric(transplant == 1|thoracic_surgery == 1|vascular == 1)),
hx_revasc = as.factor(as.numeric(prior_CABG == 1 | prior_PCI ==1))) %>%
mutate(RCRI_pt = as.factor(as.numeric(RCRI_pt) + as.numeric(high_risk_surgery == 1))) %>%
mutate(severe_MI = as.factor(as.numeric(cardiogenic_shock == 1 | IABP == 1))) %>%
select(-c(prior_CABG, prior_PCI, prior_MI, CAD, nchronic)) %>% #transplant,thoracic_surgery,vascular,)) %>%
mutate(`RCRI >= 3` = as.factor(as.numeric(RCRI_pt) > 3))
save(data_formatted, data_all, file = data_filename)
#Data saving
data_filename = "data_imputed_with_stroke.rda"
sum(data_formatted$Ischemic_stroke)
sum(data_formatted$Ischemic_stroke == 1)
dim(data_formatted)
source("impute_missing.R")
data_formatted[,missing_vars] <- complete_data[,missing_vars]
data_filename
save(data_formatted, data_all, file = data_filename)
out.RCRIplus <- glm(as.numeric(died) ~  age +
gender +
race +
year +
Afib +
sepsis +
PNA +
PE +
DVT +
Bleed +
Ischemic_stroke +
hx_chf +
hx_CVA +
hx_DM +
hx_ckd +
hx_isch_heart +
hx_revasc +
high_risk_surgery +
#surgery_type +
invasive_mgmt +
NSTEMI +
severe_MI ,
data = data, family = "binomial")
data_formatted <- data_all %>%
rename(obesity = cm_obese,
alcoholic = cm_alcohol,
HTN = cm_htn_c,
valve_dz = cm_valve,
chrnlung = cm_chrnlung,
anemia = cm_anemdef,
PAD = cm_perivasc) %>%
mutate(age_factor = as.factor(ntile(age,3)),
age = as.numeric(scale(age)),
nchronic = as.numeric(scale(nchronic)),
invasive_mgmt = as.factor(invasive_mgmt),
high_risk_surgery = as.factor(as.numeric(transplant == 1|thoracic_surgery == 1|vascular == 1|abdominal == 1)),
high_risk_surgery_2 = as.factor(as.numeric(transplant == 1|thoracic_surgery == 1|vascular == 1)),
hx_revasc = as.factor(as.numeric(prior_CABG == 1 | prior_PCI ==1))) %>%
mutate(RCRI_pt = as.factor(as.numeric(RCRI_pt) + as.numeric(high_risk_surgery == 1))) %>%
mutate(severe_MI = as.factor(as.numeric(cardiogenic_shock == 1 | IABP == 1))) %>%
select(-c(prior_CABG, prior_PCI, prior_MI, CAD, nchronic)) %>% #transplant,thoracic_surgery,vascular,)) %>%
mutate(`RCRI >= 3` = as.factor(as.numeric(RCRI_pt) > 3))
data <- data_formatted
out.RCRIplus <- glm(as.numeric(died) ~  age +
gender +
race +
year +
Afib +
sepsis +
PNA +
PE +
DVT +
Bleed +
Ischemic_stroke +
hx_chf +
hx_CVA +
hx_DM +
hx_ckd +
hx_isch_heart +
hx_revasc +
high_risk_surgery +
#surgery_type +
invasive_mgmt +
NSTEMI +
severe_MI ,
data = data, family = "binomial")
mod_coefs <- data.frame(apply(exp(cbind(OR = coef(out.RCRIplus), confint(out.RCRIplus))),2,round,2))
mod_coefs
out.null <- glm(as.numeric(died) ~  age +
gender +
race +
year +
Afib +
sepsis +
PNA +
PE +
DVT +
Bleed +
invasive_mgmt +
NSTEMI +
severe_MI +
NSTEMI*Bleed,
data = data, family = "binomial")
mod_coefs <- data.frame(apply(exp(cbind(OR = coef(out.RCRIplus), confint(out.RCRIplus))),2,round,2))
mod_coefs
dat_PCA <- data %>%
mutate(RCRI_pt = as.numeric(scale(as.numeric(RCRI_pt))))
dat_PCA <- dat_PCA[, (colnames(dat_PCA) %in% c("age",
"race",
"gender",
"obesity",
"smoking",
"alcoholic",
"HTN",
"HLD",
"hx_DM",
"hx_ckd",
"hx_isch_heart",
"hx_revasc",
"PAD",
"valve_dz",
"hx_chf",
"hx_VTE",
"chrnlung",
"malignancy",
"cm_mets",
"anemia",
"hx_CVA",
"high_risk_surgery"
))]
split.data.all <- splitmix(dat_PCA)
split.data <- split.data.all
X1 <- split.data$X.quanti
X2 <- split.data$X.quali
sub.PCA <- data[,(colnames(data) %in% c("died", "year", "race", "gender", "invasive_mgmt", "PNA", "sepsis", "Afib", "PE", "DVT", "Ischemic_stroke", "Bleed", "NSTEMI", "severe_MI", unlist(retained_vars)))]
out.PCA <- glm(as.numeric(died) ~., data = sub.PCA, family = "binomial")
var_names_full <- c(names(X1), names(X2), "cm_mets", "PNA", "Ischemic_stroke","sepsis", "Afib", "PE", "DVT", "Bleed", "NSTEMI", "severe_MI")#, "nchronic")
data_full <- data %>% select(c(year, died, invasive_mgmt, var_names_full))
out.full <- glm(died ~., data = data_full, family = "binomial")
#Select retained variables
out.contrib$max_contrib <- apply(out.contrib %>% select(-var),1,max)
retained_vars <- out.contrib %>% filter(max_contrib > 10) %>% select(var)
res.pcamix <- PCAmix(X.quanti=X1, X.quali=X2,rename.level=TRUE, ndim = 5,
graph=FALSE)
out.eig <- as.data.frame(res.pcamix$eig)
out.eig$dim <- c(1:nrow(out.eig))
out.ind <- as.data.frame(res.pcamix$ind$coord) %>%
mutate(ind = row_number()) %>%
left_join(data, by = "ind") %>%
drop_na()
out.quant <- res.pcamix$quanti$contrib.pct
out.qual <- res.pcamix$quali$contrib.pct
out.contrib <- rbind(out.quant,out.qual) %>%
as.data.frame()
out.contrib$var <- rownames(out.contrib)
out.coord <- as.data.frame(rbind(res.pcamix$quanti.cor, res.pcamix$categ.coord))
out.coord$var <- rownames(out.coord)
out.loadings <- res.pcamix$sqload
out.coord$sig <- as.factor(out.coord$`dim 1` > 0.4 | out.coord$`dim 2` > 0.5 |out.coord$`dim 1` < -0.4 | out.coord$`dim 2` < -0.5 )
## Feature selection -------------------------------------------------------------------------------------------
out.contrib$max_contrib <- apply(out.contrib %>% select(-var),1,max)
retained_vars <- out.contrib %>% filter(max_contrib > 10) %>% select(var)
sub.PCA <- data[,(colnames(data) %in% c("died", "year", "race", "gender", "invasive_mgmt", "PNA", "sepsis", "Afib", "PE", "DVT", "Ischemic_stroke", "Bleed", "NSTEMI", "severe_MI", unlist(retained_vars)))]
out.PCA <- glm(as.numeric(died) ~., data = sub.PCA, family = "binomial")
var_names_full <- c(names(X1), names(X2), "cm_mets", "PNA", "Ischemic_stroke","sepsis", "Afib", "PE", "DVT", "Bleed", "NSTEMI", "severe_MI")#, "nchronic")
data_full <- data %>% select(c(year, died, invasive_mgmt, var_names_full))
out.full <- glm(died ~., data = data_full, family = "binomial")
model_comp <- data.frame(model = c("Full", "PCA", "RCRIPlus", "null"),
BIC = c(BIC(out.full), BIC(out.PCA), BIC(out.RCRIplus), BIC(out.null))) %>%
mutate(delta = BIC - min(BIC))
model_comp
## Exploratory data analysis; Perioperative MI
## Sylvia Ranjeva
# Set the working directory to the source file directory
setwd("~/Desktop/perip_MI_GITHUB/mortality_dispo_models")
## Load package scripts -----------------------------------------------
require(ggplot2)
require(foreign)
require(readstata13)
require(dplyr)
require(tidyr)
require(FactoMineR)
require(PCAmixdata)
require(factoextra)
require(ggfortify)
require(RSQLite)
require(GGally)
require(reshape2)
require(cowplot)
require(corrplot)
require(tidyverse)
require(MASS)
library(proto)
library(pROC)
select <- dplyr::select
#Plotting specs
textSize = 12
save_plots = F
source("../utility_scripts/plot_themes.R")
#Data saving
data_filename = "data_with_NA.rda"
save_data = F
drop_missing = F
impute_missing = T
generate_data = F
output_tables = F
load(data_filename)
data <- data_formatted
dfm_outcomes <- data %>% select(year, died, ICF, NSTEMI, invasive_mgmt, hx_isch_heart, hx_revasc) %>%
apply(.,2,as.numeric) %>%
as.data.frame() %>%
group_by(year) %>%
summarize(mortality = mean(died, na.rm = T),
ICF = mean(ICF, na.rm = T),
STEMI = 1-mean(NSTEMI, na.rm=T),
invasive_mgmt = mean(invasive_mgmt, na.rm=T),
hx_isch_heart = mean(hx_isch_heart, na.rm = T),
hx_revasc = mean(hx_revasc, na.rm = T)
) %>%
ungroup()
trend_mortality <- data %>% select(year, died) %>%
table() %>%
CochranArmitageTest(., alternative = c("decreasing"))
trend_ICF <- data %>% filter(died ==0) %>%
select(year, ICF) %>%
table() %>%
CochranArmitageTest(., alternative = c("two.sided"))
trend_NSTEMI <- data %>% select(year, NSTEMI) %>%
table() %>%
CochranArmitageTest(., alternative = c("increasing"))
trend_invasive <- data %>% select(year, invasive_mgmt) %>%
table() %>%
CochranArmitageTest(., alternative = c("increasing"))
trend_isch <- data %>% select(year, hx_isch_heart) %>%
table() %>%
CochranArmitageTest(., alternative = c("increasing"))
trend_revasc <- data %>% select(year, hx_revasc) %>%
table() %>%
CochranArmitageTest(., alternative = c("increasing"))
## Load package scripts -----------------------------------------------
require(ggplot2)
require(foreign)
require(readstata13)
require(dplyr)
require(tidyr)
require(FactoMineR)
require(PCAmixdata)
require(factoextra)
require(ggfortify)
require(RSQLite)
require(GGally)
require(reshape2)
require(cowplot)
require(corrplot)
require(tidyverse)
require(MASS)
library(proto)
library(pROC)
trend_revasc <- data %>% select(year, hx_revasc) %>%
table() %>%
CochranArmitageTest(., alternative = c("increasing"))
help("CochranArmitageTest")
require(DescTools)
trend_revasc <- data %>% select(year, hx_revasc) %>%
table() %>%
CochranArmitageTest(., alternative = c("increasing"))
trend_revasc
data %>% select(year, hx_revasc) %>%
table()
data %>% select(year, hx_revasc) %>% mutate(percent = sum(hx_revasc)/n())
data %>% select(year, hx_revasc) %>% mutate(percent = sum(hx_revasc == 1)/n())
select <- dplyr::select
data %>% select(year, hx_revasc) %>% summarize(percent = sum(hx_revasc == 1)/n())
data %>% group_by(year, hx_revasc) %>% summarize(percent = sum(hx_revasc == 1)/n())
data %>% group_by(year, hx_revasc) %>% summarize(percent = mean(hx_revasc == 1))
data %>% group_by(year) %>% summarize(percent = mean(hx_revasc == 1))
install.packages("BiocManager")
require(BiocManager)
BiocManager::install("TCGAbiolinks")
